1. 객체지향
2. UML
3. 객체지향 설계 원칙(SOLID)
4. 객체지향 디자인패턴

클래스 : 공통된 개념들에 대한 객체 정의
추상화에 의해서 클래스가 저의 될 수 있다
그 클래스의 정의에 의해서 객체가 표현 될 수 있다

모든개념간에는 계층구조가 존재함.

계층구조를 표현해내는게 상속이다! (부모클래스를 자식클래스가 물려받는 것)
실세계에 계층구조가 존재하는 것 처럼 클래스간의 계층이 존재.

상속을 하는 이유 : 하나의 TYPE으로 묶기, 재사용

메소드 상속
인터페이스 상속   / 구현 상속

추상 클래스 - 추상메소드, 가상메소드, 일반메소드 
추상메소드 - abstract void a(); {}x
가상메소드 - virture void b{}o
일반메소드 - void c();          {비율ㄹㅈ

상속의 문제점 구조변경을 할 수 없다.
but 조립은 가능!

유연성이 떨어짐
클래스들이 증가
Door의 기능을 확장하거나 도어의 기능을 늘려야 하는 경우
자식클래스들이 늘어나는데
조립방식은 방금말했던 것에 반대
상속은 구현하기는 쉽다
어뎁터 방식은 구현이 어려움 실시간에 선택되기때문에 
유연성이 크다 대신 !
언제든지 어뎁터를 갈아치울 수 있어서!
갈아치울 수 있어서 좋음 !

조립 = 객체의 선택 !

의존역전 117page  DIP 의존 역전

이름의도 구조 용어

데코레이터 패턴 장점

컴파일 타임이 아닌 런타임에 동적으로 기능을 변경할 수 있음
기존의 코드는 바뀌지 않고 기능을 확장할 수 있는 open Close 법칙이 적용 됨
클라이언트가 인터페이스 사용 (의존성 역전 법칙)


단점 : 데코레이터를 조합하는 코드가 복잡할 수 있음.
after의 코드가 늘어남
대신 상속보다는 좀 덜하지만 굳이 따지자면 인터페이스랑 데코레이터를 만든 것이 정적으로 들어난 것임, 너무 큰 단점은 아니다. 

프락시 유니테스트 공부 꼭 해보기


마스크 / 파일 압축 
C 17000
WPF 11700
C++ 22500
클린코드 23000
디자인패턴 18000
모던 C++ 디자인 패턴 18000
C#교과서 18900